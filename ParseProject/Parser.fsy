%{
module Symbolic.Expressions.Parser
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
open Symbolic.Expressions.Ast
open Microsoft.FSharp.Math
open System
%}

%token <string> INT
%token <string> ID
%token EOF LPAREN RPAREN ADD SUB MUL DIV HAT SIN COS E

%left ID
%left LPAREN
%left ADD SUB
%left MUL DIV
%left HAT
%left RPAREN

%start parseExpr

%type <Expr> parseExpr

%%

parseExpr: 
    | exp EOF { $1 }

number:
    | INT { $1 }

exp: 
    | ID { Var $1 }
    | number exp { Mul (BigNum.Parse $1 |> Num, $2) }
    | number { BigNum.Parse $1 |> Num }
    | exp SUB exp { Sub ($1, $3) }
    | exp ADD exp { Add ($1, $3) }
    | exp MUL exp { Mul ($1, $3) }
    | exp HAT number { Exp ($1, Int32.Parse $3) }
    | LPAREN exp RPAREN { $2 }
    | SUB exp { Neg $2 }
    | LPAREN exp RPAREN { $2 }