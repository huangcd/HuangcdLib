module Symbolic.Expressions.Parser
// Implementation file for parser generated by fsyacc
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
open Symbolic.Expressions.Ast
open Microsoft.FSharp.Math
open System

# 14 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAREN
  | RPAREN
  | ADD
  | SUB
  | MUL
  | DIV
  | HAT
  | SIN
  | COS
  | E
  | ID of (string)
  | INT of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_ADD
    | TOKEN_SUB
    | TOKEN_MUL
    | TOKEN_DIV
    | TOKEN_HAT
    | TOKEN_SIN
    | TOKEN_COS
    | TOKEN_E
    | TOKEN_ID
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startparseExpr
    | NONTERM_parseExpr
    | NONTERM_number
    | NONTERM_exp

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAREN  -> 1 
  | RPAREN  -> 2 
  | ADD  -> 3 
  | SUB  -> 4 
  | MUL  -> 5 
  | DIV  -> 6 
  | HAT  -> 7 
  | SIN  -> 8 
  | COS  -> 9 
  | E  -> 10 
  | ID _ -> 11 
  | INT _ -> 12 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAREN 
  | 2 -> TOKEN_RPAREN 
  | 3 -> TOKEN_ADD 
  | 4 -> TOKEN_SUB 
  | 5 -> TOKEN_MUL 
  | 6 -> TOKEN_DIV 
  | 7 -> TOKEN_HAT 
  | 8 -> TOKEN_SIN 
  | 9 -> TOKEN_COS 
  | 10 -> TOKEN_E 
  | 11 -> TOKEN_ID 
  | 12 -> TOKEN_INT 
  | 15 -> TOKEN_end_of_input
  | 13 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startparseExpr 
    | 1 -> NONTERM_parseExpr 
    | 2 -> NONTERM_number 
    | 3 -> NONTERM_exp 
    | 4 -> NONTERM_exp 
    | 5 -> NONTERM_exp 
    | 6 -> NONTERM_exp 
    | 7 -> NONTERM_exp 
    | 8 -> NONTERM_exp 
    | 9 -> NONTERM_exp 
    | 10 -> NONTERM_exp 
    | 11 -> NONTERM_exp 
    | 12 -> NONTERM_exp 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 15 
let _fsyacc_tagOfErrorTerminal = 13

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | ADD  -> "ADD" 
  | SUB  -> "SUB" 
  | MUL  -> "MUL" 
  | DIV  -> "DIV" 
  | HAT  -> "HAT" 
  | SIN  -> "SIN" 
  | COS  -> "COS" 
  | E  -> "E" 
  | ID _ -> "ID" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | ADD  -> (null : System.Object) 
  | SUB  -> (null : System.Object) 
  | MUL  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | HAT  -> (null : System.Object) 
  | SIN  -> (null : System.Object) 
  | COS  -> (null : System.Object) 
  | E  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 8us; 65535us; 0us; 6us; 6us; 6us; 13us; 6us; 14us; 6us; 15us; 6us; 16us; 17us; 18us; 6us; 20us; 6us; 7us; 65535us; 0us; 2us; 6us; 7us; 13us; 8us; 14us; 9us; 15us; 10us; 18us; 11us; 20us; 12us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 12us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 5us; 1us; 6us; 7us; 8us; 9us; 1us; 1us; 1us; 2us; 1us; 3us; 2us; 4us; 5us; 5us; 4us; 6us; 7us; 8us; 9us; 5us; 6us; 6us; 7us; 8us; 9us; 5us; 6us; 7us; 7us; 8us; 9us; 5us; 6us; 7us; 8us; 8us; 9us; 6us; 6us; 7us; 8us; 9us; 10us; 12us; 5us; 6us; 7us; 8us; 9us; 11us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 9us; 2us; 10us; 12us; 2us; 10us; 12us; 1us; 11us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 10us; 12us; 14us; 16us; 19us; 25us; 31us; 37us; 43us; 50us; 56us; 58us; 60us; 62us; 64us; 66us; 69us; 72us; |]
let _fsyacc_action_rows = 21
let _fsyacc_actionTableElements = [|4us; 32768us; 1us; 18us; 4us; 20us; 11us; 5us; 12us; 4us; 0us; 49152us; 5us; 32768us; 0us; 3us; 3us; 14us; 4us; 13us; 5us; 15us; 7us; 16us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 4us; 16389us; 1us; 18us; 4us; 20us; 11us; 5us; 12us; 4us; 4us; 16388us; 3us; 14us; 4us; 13us; 5us; 15us; 7us; 16us; 2us; 16390us; 5us; 15us; 7us; 16us; 2us; 16391us; 5us; 15us; 7us; 16us; 1us; 16392us; 7us; 16us; 5us; 32768us; 2us; 19us; 3us; 14us; 4us; 13us; 5us; 15us; 7us; 16us; 2us; 16395us; 5us; 15us; 7us; 16us; 4us; 32768us; 1us; 18us; 4us; 20us; 11us; 5us; 12us; 4us; 4us; 32768us; 1us; 18us; 4us; 20us; 11us; 5us; 12us; 4us; 4us; 32768us; 1us; 18us; 4us; 20us; 11us; 5us; 12us; 4us; 1us; 32768us; 12us; 4us; 0us; 16393us; 4us; 32768us; 1us; 18us; 4us; 20us; 11us; 5us; 12us; 4us; 0us; 16394us; 4us; 32768us; 1us; 18us; 4us; 20us; 11us; 5us; 12us; 4us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 12us; 13us; 14us; 15us; 20us; 25us; 28us; 31us; 33us; 39us; 42us; 47us; 52us; 57us; 59us; 60us; 65us; 66us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 2us; 1us; 3us; 3us; 3us; 3us; 3us; 2us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 156 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startparseExpr));
# 165 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "Parser.fsy"
                                     _1 
                   )
# 28 "Parser.fsy"
                 : Expr));
# 176 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "Parser.fsy"
                                 _1 
                   )
# 31 "Parser.fsy"
                 : 'number));
# 187 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                Var _1 
                   )
# 34 "Parser.fsy"
                 : 'exp));
# 198 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'number)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                        Mul (BigNum.Parse _1 |> Num, _2) 
                   )
# 35 "Parser.fsy"
                 : 'exp));
# 210 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'number)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                    BigNum.Parse _1 |> Num 
                   )
# 36 "Parser.fsy"
                 : 'exp));
# 221 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                         Sub (_1, _3) 
                   )
# 37 "Parser.fsy"
                 : 'exp));
# 233 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                         Add (_1, _3) 
                   )
# 38 "Parser.fsy"
                 : 'exp));
# 245 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                         Mul (_1, _3) 
                   )
# 39 "Parser.fsy"
                 : 'exp));
# 257 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'number)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                            Exp (_1, Int32.Parse _3) 
                   )
# 40 "Parser.fsy"
                 : 'exp));
# 269 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                               _2 
                   )
# 41 "Parser.fsy"
                 : 'exp));
# 280 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                     Neg _2 
                   )
# 42 "Parser.fsy"
                 : 'exp));
# 291 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                               _2 
                   )
# 43 "Parser.fsy"
                 : 'exp));
|]
# 303 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 16;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let parseExpr lexer lexbuf : Expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
